/* tslint:disable */
/* eslint-disable */
/**
 * BlockInfrastructure-Core
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../model';
// @ts-ignore
import { MeProjection } from '../model';
// @ts-ignore
import { UpdateUserPreferenceRequest } from '../model';
// @ts-ignore
import { UserSearchResponse } from '../model';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 사용자의 현재 정보와, 소속되어 있는 채널 정보를 반환합니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersDetailProjectionAsync: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JwtAuthenticationFilter required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 사용자를 검색합니다.(이메일/이름 동시 지원)
         * @param {string} [query] 검색어(이메일/이름 동시 지원)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUserAsync: async (query?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JwtAuthenticationFilter required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * MeProjection에 대한 Cache Invalidation을 진행하며, 클라이언트 측에서 ME API를 호출하여 최신 정보를 받아옵니다.
         * @summary 현재 사용자의 계정 설정을 업데이트 합니다. 업데이트 이후
         * @param {UpdateUserPreferenceRequest} [UpdateUserPreferenceRequest] Update Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPreferenceAsync: async (UpdateUserPreferenceRequest?: UpdateUserPreferenceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/preferences`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JwtAuthenticationFilter required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateUserPreferenceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 사용자의 현재 정보와, 소속되어 있는 채널 정보를 반환합니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersDetailProjectionAsync(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeProjection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersDetailProjectionAsync(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 사용자를 검색합니다.(이메일/이름 동시 지원)
         * @param {string} [query] 검색어(이메일/이름 동시 지원)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchUserAsync(query?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserSearchResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchUserAsync(query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * MeProjection에 대한 Cache Invalidation을 진행하며, 클라이언트 측에서 ME API를 호출하여 최신 정보를 받아옵니다.
         * @summary 현재 사용자의 계정 설정을 업데이트 합니다. 업데이트 이후
         * @param {UpdateUserPreferenceRequest} [UpdateUserPreferenceRequest] Update Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserPreferenceAsync(UpdateUserPreferenceRequest?: UpdateUserPreferenceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserPreferenceAsync(UpdateUserPreferenceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary 사용자의 현재 정보와, 소속되어 있는 채널 정보를 반환합니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersDetailProjectionAsync(options?: any): AxiosPromise<MeProjection> {
            return localVarFp.getUsersDetailProjectionAsync(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 사용자를 검색합니다.(이메일/이름 동시 지원)
         * @param {string} [query] 검색어(이메일/이름 동시 지원)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUserAsync(query?: string, options?: any): AxiosPromise<Array<UserSearchResponse>> {
            return localVarFp.searchUserAsync(query, options).then((request) => request(axios, basePath));
        },
        /**
         * MeProjection에 대한 Cache Invalidation을 진행하며, 클라이언트 측에서 ME API를 호출하여 최신 정보를 받아옵니다.
         * @summary 현재 사용자의 계정 설정을 업데이트 합니다. 업데이트 이후
         * @param {UpdateUserPreferenceRequest} [UpdateUserPreferenceRequest] Update Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPreferenceAsync(UpdateUserPreferenceRequest?: UpdateUserPreferenceRequest, options?: any): AxiosPromise<void> {
            return localVarFp.updateUserPreferenceAsync(UpdateUserPreferenceRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary 사용자의 현재 정보와, 소속되어 있는 채널 정보를 반환합니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUsersDetailProjectionAsync(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUsersDetailProjectionAsync(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 사용자를 검색합니다.(이메일/이름 동시 지원)
     * @param {string} [query] 검색어(이메일/이름 동시 지원)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public searchUserAsync(query?: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).searchUserAsync(query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * MeProjection에 대한 Cache Invalidation을 진행하며, 클라이언트 측에서 ME API를 호출하여 최신 정보를 받아옵니다.
     * @summary 현재 사용자의 계정 설정을 업데이트 합니다. 업데이트 이후
     * @param {UpdateUserPreferenceRequest} [UpdateUserPreferenceRequest] Update Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUserPreferenceAsync(UpdateUserPreferenceRequest?: UpdateUserPreferenceRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateUserPreferenceAsync(UpdateUserPreferenceRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
