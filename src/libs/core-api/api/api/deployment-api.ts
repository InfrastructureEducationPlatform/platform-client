/* tslint:disable */
/* eslint-disable */
/**
 * BlockInfrastructure-Core
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeploymentProjection } from '../model';
// @ts-ignore
import { ErrorResponse } from '../model';
/**
 * DeploymentApi - axios parameter creator
 * @export
 */
export const DeploymentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 배포 리스트 중, 가장 최신만 지원합니다.
         * @summary 특정 배포를 삭제합니다.
         * @param {string} deploymentId 삭제할 배포 Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyDeploymentAsync: async (deploymentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deploymentId' is not null or undefined
            assertParamExists('destroyDeploymentAsync', 'deploymentId', deploymentId)
            const localVarPath = `/deployment/{deploymentId}`
                .replace(`{${"deploymentId"}}`, encodeURIComponent(String(deploymentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JwtAuthenticationFilter required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 해당 API는 과도한 DB조회를 막기 위해 최초 요청으로부터 1분간 캐싱합니다.
         * @summary 특정 배포 정보를 가져옵니다.(FE Polling혹은 배포 정보 조회)
         * @param {string} deploymentId 조회할 배포 정보 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeploymentInformationAsync: async (deploymentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deploymentId' is not null or undefined
            assertParamExists('getDeploymentInformationAsync', 'deploymentId', deploymentId)
            const localVarPath = `/deployment/{deploymentId}`
                .replace(`{${"deploymentId"}}`, encodeURIComponent(String(deploymentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JwtAuthenticationFilter required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 해당 API는 사용자가 소속되어 있는 채널의 모든 배포 리스트를 불러옵니다.
         * @summary 특정 사용자에 해당하는 배포 정보 상태들을 모두 불러옵니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeploymentInformationListAsync: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/deployment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JwtAuthenticationFilter required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeploymentApi - functional programming interface
 * @export
 */
export const DeploymentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeploymentApiAxiosParamCreator(configuration)
    return {
        /**
         * 배포 리스트 중, 가장 최신만 지원합니다.
         * @summary 특정 배포를 삭제합니다.
         * @param {string} deploymentId 삭제할 배포 Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroyDeploymentAsync(deploymentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroyDeploymentAsync(deploymentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 해당 API는 과도한 DB조회를 막기 위해 최초 요청으로부터 1분간 캐싱합니다.
         * @summary 특정 배포 정보를 가져옵니다.(FE Polling혹은 배포 정보 조회)
         * @param {string} deploymentId 조회할 배포 정보 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeploymentInformationAsync(deploymentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeploymentProjection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeploymentInformationAsync(deploymentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 해당 API는 사용자가 소속되어 있는 채널의 모든 배포 리스트를 불러옵니다.
         * @summary 특정 사용자에 해당하는 배포 정보 상태들을 모두 불러옵니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeploymentInformationListAsync(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeploymentProjection>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeploymentInformationListAsync(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DeploymentApi - factory interface
 * @export
 */
export const DeploymentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeploymentApiFp(configuration)
    return {
        /**
         * 배포 리스트 중, 가장 최신만 지원합니다.
         * @summary 특정 배포를 삭제합니다.
         * @param {string} deploymentId 삭제할 배포 Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyDeploymentAsync(deploymentId: string, options?: any): AxiosPromise<void> {
            return localVarFp.destroyDeploymentAsync(deploymentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 해당 API는 과도한 DB조회를 막기 위해 최초 요청으로부터 1분간 캐싱합니다.
         * @summary 특정 배포 정보를 가져옵니다.(FE Polling혹은 배포 정보 조회)
         * @param {string} deploymentId 조회할 배포 정보 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeploymentInformationAsync(deploymentId: string, options?: any): AxiosPromise<DeploymentProjection> {
            return localVarFp.getDeploymentInformationAsync(deploymentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 해당 API는 사용자가 소속되어 있는 채널의 모든 배포 리스트를 불러옵니다.
         * @summary 특정 사용자에 해당하는 배포 정보 상태들을 모두 불러옵니다.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeploymentInformationListAsync(options?: any): AxiosPromise<Array<DeploymentProjection>> {
            return localVarFp.getDeploymentInformationListAsync(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeploymentApi - object-oriented interface
 * @export
 * @class DeploymentApi
 * @extends {BaseAPI}
 */
export class DeploymentApi extends BaseAPI {
    /**
     * 배포 리스트 중, 가장 최신만 지원합니다.
     * @summary 특정 배포를 삭제합니다.
     * @param {string} deploymentId 삭제할 배포 Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeploymentApi
     */
    public destroyDeploymentAsync(deploymentId: string, options?: AxiosRequestConfig) {
        return DeploymentApiFp(this.configuration).destroyDeploymentAsync(deploymentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 해당 API는 과도한 DB조회를 막기 위해 최초 요청으로부터 1분간 캐싱합니다.
     * @summary 특정 배포 정보를 가져옵니다.(FE Polling혹은 배포 정보 조회)
     * @param {string} deploymentId 조회할 배포 정보 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeploymentApi
     */
    public getDeploymentInformationAsync(deploymentId: string, options?: AxiosRequestConfig) {
        return DeploymentApiFp(this.configuration).getDeploymentInformationAsync(deploymentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 해당 API는 사용자가 소속되어 있는 채널의 모든 배포 리스트를 불러옵니다.
     * @summary 특정 사용자에 해당하는 배포 정보 상태들을 모두 불러옵니다.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeploymentApi
     */
    public getDeploymentInformationListAsync(options?: AxiosRequestConfig) {
        return DeploymentApiFp(this.configuration).getDeploymentInformationListAsync(options).then((request) => request(this.axios, this.basePath));
    }
}
