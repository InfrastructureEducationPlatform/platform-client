/* tslint:disable */

/* eslint-disable */

/**
 * BlockInfrastructure-Core
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AxiosInstance, AxiosPromise, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';

// @ts-ignore
import {
  BASE_PATH,
  BaseAPI,
  COLLECTION_FORMATS,
  RequestArgs,
  RequiredError,
} from '../base';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  createRequestFunction,
  serializeDataIfNeeded,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  toPathString,
} from '../common';
import type { Configuration } from '../configuration';
// @ts-ignore
import { FileProjectionResponse } from '../model';

/**
 * FileApi - axios parameter creator
 * @export
 */
export const FileApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary 파일을 가져옵니다.
     * @param {string} fileId 파일 Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFileAsync: async (
      fileId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'fileId' is not null or undefined
      assertParamExists('getFileAsync', 'fileId', fileId);
      const localVarPath = `/files/{fileId}`.replace(
        `{${'fileId'}}`,
        encodeURIComponent(String(fileId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 파일을 업로드 합니다.
     * @param {File} [formFile]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFileAsync: async (
      formFile?: File,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/files/upload`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      // authentication JwtAuthenticationFilter required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (formFile !== undefined) {
        localVarFormParams.append('formFile', formFile as any);
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * FileApi - functional programming interface
 * @export
 */
export const FileApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = FileApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 파일을 가져옵니다.
     * @param {string} fileId 파일 Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFileAsync(
      fileId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getFileAsync(
        fileId,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary 파일을 업로드 합니다.
     * @param {File} [formFile]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async uploadFileAsync(
      formFile?: File,
      options?: AxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<FileProjectionResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFileAsync(
        formFile,
        options,
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * FileApi - factory interface
 * @export
 */
export const FileApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = FileApiFp(configuration);
  return {
    /**
     *
     * @summary 파일을 가져옵니다.
     * @param {string} fileId 파일 Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFileAsync(fileId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .getFileAsync(fileId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 파일을 업로드 합니다.
     * @param {File} [formFile]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFileAsync(
      formFile?: File,
      options?: any,
    ): AxiosPromise<FileProjectionResponse> {
      return localVarFp
        .uploadFileAsync(formFile, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * FileApi - object-oriented interface
 * @export
 * @class FileApi
 * @extends {BaseAPI}
 */
export class FileApi extends BaseAPI {
  /**
   *
   * @summary 파일을 가져옵니다.
   * @param {string} fileId 파일 Id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FileApi
   */
  public getFileAsync(fileId: string, options?: AxiosRequestConfig) {
    return FileApiFp(this.configuration)
      .getFileAsync(fileId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 파일을 업로드 합니다.
   * @param {File} [formFile]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FileApi
   */
  public uploadFileAsync(formFile?: File, options?: AxiosRequestConfig) {
    return FileApiFp(this.configuration)
      .uploadFileAsync(formFile, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
