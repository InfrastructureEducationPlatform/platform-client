openapi: 3.0.1
info:
  title: BlockInfrastructure-Core
  version: '1.0'
paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: 서비스에 로그인을 실시합니다.
      description: 등록되지 않은 유저인 경우 NeedsRegistration과 JoinToken을 응답으로 반환합니다.
      operationId: LoginAsync
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: "OAuth에서 정보를 성공적으로 가져온 경우. 등록되지 않은 사용자는 LoginResult가 NeedsRegistration로 표기되고, 등록된 사용자는 로그인 성공으로 판단해\r\nLoginSucceed를 반환합니다."
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TokenResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: OAuth 로그인 혹은 OAuth 정보를 가져오는데 실패한 경우.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/register:
    post:
      tags:
        - Auth
      summary: 서비스에 회원 가입합니다.
      operationId: RegisterAsync
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
      responses:
        '200':
          description: 회원 가입에 성공했을 때 반환합니다.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TokenResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: JWT Join Token Validation에 실패했을 때
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: 이미 존재하는 인증 정보일 때
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/refresh:
    post:
      tags:
        - Auth
      summary: 리프레시 로직을 실행합니다.
      operationId: RefreshAsync
      requestBody:
        description: 리프레시 요청
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: 리프레시에 성공했을 때 반환합니다.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TokenResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: '엑세스 토큰이 잘못되었거나, 리프레시 로직에 실패했을 때'
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /channels:
    post:
      tags:
        - Channel
      summary: '채널을 생성하고, 생성한 사람을 Owner로 추가합니다.'
      operationId: CreateChannelAsync
      requestBody:
        description: 채널 생성 요청
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChannelRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateChannelRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateChannelRequest'
      responses:
        '200':
          description: Success
        '204':
          description: 채널 생성에 성공한 경우
      security:
        - JwtAuthenticationFilter: []
  '/channels/{channelId}':
    get:
      tags:
        - Channel
      summary: 특정 채널의 정보와 채널의 사용자 정보를 가져옵니다.
      operationId: GetChannelInformationAsync
      parameters:
        - name: channelId
          in: path
          description: 조회할 채널의 Id
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: 채널 정보 조회에 성공한 경우
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ChannelInformationResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelInformationResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ChannelInformationResponse'
        '401':
          description: 인증 정보가 없는 경우
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 채널 조회 권한이 없는 경우
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 채널 정보가 존재하지 않는 경우
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - JwtAuthenticationFilter: []
    put:
      tags:
        - Channel
      summary: 특정 채널의 기본 정보를 수정합니다.
      operationId: UpdateChannelInformationAsync
      parameters:
        - name: channelId
          in: path
          description: 수정할 채널 Id
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: 수정할 채널 정보
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateChannelInformationRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateChannelInformationRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateChannelInformationRequest'
      responses:
        '401':
          description: 인증 정보가 없는 경우
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 채널 수정 권한이 없는 경우
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 채널 정보가 존재하지 않는 경우
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '204':
          description: 채널 정보 수정에 성공한 경우
      security:
        - JwtAuthenticationFilter: []
  '/channels/{channelId}/users':
    put:
      tags:
        - Channel
      summary: 특정 채널의 멤버의 권한을 수정합니다.
      operationId: UpdateUserChannelRoleAsync
      parameters:
        - name: channelId
          in: path
          description: 채널 Id
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: 사용자 ID와 채널 권한이 명시된 Request Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserChannelRoleRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateUserChannelRoleRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateUserChannelRoleRequest'
      responses:
        '400':
          description: 만약 현재 요청하는 사람이 직접 수정하려고 하는 경우
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 정보가 없는 경우
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 채널 수정 권한이 없는 경우
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 채널 정보가 존재하지 않는 경우
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '204':
          description: 채널 정보 수정에 성공한 경우
      security:
        - JwtAuthenticationFilter: []
    post:
      tags:
        - Channel
      summary: 특정 채널에 사용자(멤버)를 추가합니다.
      operationId: AddUserToChannelAsync
      parameters:
        - name: channelId
          in: path
          description: 채널 Id
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: 추가할 사용자의 Id와 권한을 명시한 Request Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddUserToChannelRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/AddUserToChannelRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AddUserToChannelRequest'
      responses:
        '400':
          description: 만약 현재 요청하는 사람이 본인을 추가하려고 하는 경우
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 정보가 없는 경우
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 채널 수정 권한이 없는 경우
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: 만약 이미 채널에 사용자가 있는 경우
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '204':
          description: 채널 멤버 추가에 성공한 경우
      security:
        - JwtAuthenticationFilter: []
  '/channels/{channelId}/users/{userId}':
    delete:
      tags:
        - Channel
      summary: 특정 채널에서 사용자(멤버)를 제거합니다.
      operationId: RemoveUserFromChannelAsync
      parameters:
        - name: channelId
          in: path
          description: 변경할 채널 Id
          required: true
          style: simple
          schema:
            type: string
        - name: userId
          in: path
          description: 사용자 Id
          required: true
          style: simple
          schema:
            type: string
      responses:
        '400':
          description: 만약 현재 요청하는 사람이 본인을 삭제하려고 하는 경우
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 정보가 없는 경우
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 채널 수정 권한이 없는 경우
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 채널 정보가 존재하지 않는 경우
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '204':
          description: 채널 정보 수정에 성공한 경우
      security:
        - JwtAuthenticationFilter: []
  '/deployment/{deploymentId}':
    get:
      tags:
        - Deployment
      summary: 특정 배포 정보를 가져옵니다.(FE Polling혹은 배포 정보 조회)
      description: 해당 API는 과도한 DB조회를 막기 위해 최초 요청으로부터 1분간 캐싱합니다.
      operationId: GetDeploymentInformationAsync
      parameters:
        - name: deploymentId
          in: path
          description: 조회할 배포 정보 ID
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: 배포 정보를 성공적으로 가져온 경우
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/DeploymentProjection'
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentProjection'
            text/json:
              schema:
                $ref: '#/components/schemas/DeploymentProjection'
        '401':
          description: 인증이 실패한 경우
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 배포 정보를 찾을 수 없는 경우
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - JwtAuthenticationFilter: []
    delete:
      tags:
        - Deployment
      summary: 특정 배포를 삭제합니다.
      description: '배포 리스트 중, 가장 최신만 지원합니다.'
      operationId: DestroyDeploymentAsync
      parameters:
        - name: deploymentId
          in: path
          description: 삭제할 배포 Id
          required: true
          style: simple
          schema:
            type: string
      responses:
        '204':
          description: 배포 정보를 성공적으로 삭제한 경우
        '400':
          description: 삭제하려고 하는 배포가 최신이 아닌 경우
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증이 실패한 경우
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 배포 정보를 찾을 수 없는 경우
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - JwtAuthenticationFilter: []
  /deployment:
    get:
      tags:
        - Deployment
      summary: 특정 사용자에 해당하는 배포 정보 상태들을 모두 불러옵니다.
      description: 해당 API는 사용자가 소속되어 있는 채널의 모든 배포 리스트를 불러옵니다.
      operationId: GetDeploymentInformationListAsync
      responses:
        '200':
          description: 배포 정보를 성공적으로 가져온 경우
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeploymentProjection'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeploymentProjection'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeploymentProjection'
        '401':
          description: 인증이 실패한 경우
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - JwtAuthenticationFilter: []
  /files/upload:
    post:
      tags:
        - File
      summary: 파일을 업로드 합니다.
      operationId: UploadFileAsync
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                formFile:
                  type: string
                  format: binary
            encoding:
              formFile:
                style: form
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/FileProjectionResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/FileProjectionResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/FileProjectionResponse'
      security:
        - JwtAuthenticationFilter: []
  '/files/{fileId}':
    get:
      tags:
        - File
      summary: 파일을 가져옵니다.
      operationId: GetFileAsync
      parameters:
        - name: fileId
          in: path
          description: 파일 Id
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: Success
  '/channels/{channelId}/plugins/available':
    get:
      tags:
        - Plugin
      summary: 서비스에서 허용하는 플러그인을 모두 리스팅 합니다.
      operationId: ListAvailablePlugins
      parameters:
        - name: channelId
          in: path
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: 플러그인 목록 조회 성공 시
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PluginProjection'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PluginProjection'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PluginProjection'
        '401':
          description: 인증 실패 시
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - JwtAuthenticationFilter: []
  '/channels/{channelId}/plugins/install':
    post:
      tags:
        - Plugin
      summary: 채널에 플러그인을 설치합니다.
      operationId: InstallPluginToChannelAsync
      parameters:
        - name: channelId
          in: path
          description: 플러그인을 설치할 채널 Id
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: 플러그인 설치 요청
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstallPluginRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/InstallPluginRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/InstallPluginRequest'
      responses:
        '200':
          description: 플러그인 설치 성공 시
        '401':
          description: 인증 실패 시
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 채널에 대한 권한이 없는 경우
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - JwtAuthenticationFilter: []
  /pricing:
    get:
      tags:
        - Pricing
      summary: 서버에 등록된 모든 가격 정보를 불러옵니다.
      operationId: GetAllPricingInformationAsync
      responses:
        '200':
          description: 성공적으로 가격 정보를 불러왔습니다.
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PricingInformationProjection'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PricingInformationProjection'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PricingInformationProjection'
        '401':
          description: 인증 토큰이 없어 인증에 실패한 경우
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - JwtAuthenticationFilter: []
  '/channels/{channelId}/sketches':
    get:
      tags:
        - Sketch
      summary: '채널 내에 있는 모든 스케치를 가져옵니다,'
      description: '이 API는 채널의 Owner, Reader 모두 조회할 수 있습니다.'
      operationId: ListSketchesInChannelAsync
      parameters:
        - name: channelId
          in: path
          description: 조회할 채널 ID
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: 조회에 성공한 경우.
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SketchResponse'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SketchResponse'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SketchResponse'
        '401':
          description: 인증 토큰이 없어 인증에 실패한 경우
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 스케치를 가져오는데 채널 권한이 부족한 경우(해당 API에서는 소속되어 있지 않은 채널을 조회하려 했을 때 반환)
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - JwtAuthenticationFilter: []
    post:
      tags:
        - Sketch
      summary: 채널 내에 빈 스케치를 새로 추가합니다.
      description: 이 API는 채널의 Owner만 사용할 수 있습니다.
      operationId: CreateSketchAsync
      parameters:
        - name: channelId
          in: path
          description: 채널 ID
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: 스케치 생성 요청
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSketchRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateSketchRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateSketchRequest'
      responses:
        '200':
          description: 스케치 생성에 성공한 경우.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/SketchResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SketchResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/SketchResponse'
        '403':
          description: 스케치를 생성하는데 채널 권한이 부족한 경우(해당 API에서는 owner권한만 허용.)
      security:
        - JwtAuthenticationFilter: []
  '/channels/{channelId}/sketches/{sketchId}':
    put:
      tags:
        - Sketch
      summary: 스케치를 업데이트 합니다.
      operationId: UpdateSketchAsync
      parameters:
        - name: channelId
          in: path
          description: 채널 ID
          required: true
          style: simple
          schema:
            type: string
        - name: sketchId
          in: path
          description: 업데이트 할 스케치 ID
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: 업데이트 할 스케치 내용
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSketchRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateSketchRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateSketchRequest'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/SketchResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SketchResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/SketchResponse'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - JwtAuthenticationFilter: []
    get:
      tags:
        - Sketch
      summary: 특정 스케치를 불러옵니다.
      operationId: GetSketchAsync
      parameters:
        - name: channelId
          in: path
          description: 채널 ID
          required: true
          style: simple
          schema:
            type: string
        - name: sketchId
          in: path
          description: 가져올 특정 스케치 ID
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: 정상적으로 데이터를 불러왔을 때
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/SketchResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SketchResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/SketchResponse'
        '404':
          description: 해당 스케치를 찾을 수 없을 때
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - JwtAuthenticationFilter: []
  '/channels/{channelId}/sketches/{sketchId}/deploy':
    post:
      tags:
        - Sketch
      summary: 배포를 시작합니다.
      description: '해당 API는 Blocking API가 아닌, Non-Blocking API이며, 응답으로는 배포의 상황을 조회할 수 있는 DeploymentProjection을 반환합니다.'
      operationId: DeploySketchAsync
      parameters:
        - name: channelId
          in: path
          description: 채널 ID
          required: true
          style: simple
          schema:
            type: string
        - name: sketchId
          in: path
          description: 배포할 스케치 ID
          required: true
          style: simple
          schema:
            type: string
        - name: pluginId
          in: query
          description: 배포할 때 사용할 플러그인 ID
          style: form
          schema:
            type: string
      responses:
        '202':
          description: 정상적으로 배포 시작에 성공한 경우
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/LightDeploymentProjection'
            application/json:
              schema:
                $ref: '#/components/schemas/LightDeploymentProjection'
            text/json:
              schema:
                $ref: '#/components/schemas/LightDeploymentProjection'
        '404':
          description: 해당 스케치를 찾을 수 없을 때
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - JwtAuthenticationFilter: []
  '/channels/{channelId}/sketches/{sketchId}/incremental-deploy':
    post:
      tags:
        - Sketch
      operationId: IncrementalDeploySketchAsync
      parameters:
        - name: channelId
          in: path
          required: true
          style: simple
          schema:
            type: string
        - name: sketchId
          in: path
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncrementalDeploymentRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/IncrementalDeploymentRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/IncrementalDeploymentRequest'
      responses:
        '200':
          description: Success
  '/channels/{channelId}/sketches/{sketchId}/internal':
    get:
      tags:
        - Sketch
      operationId: GetSketchInternalAsync
      parameters:
        - name: channelId
          in: path
          required: true
          style: simple
          schema:
            type: string
        - name: sketchId
          in: path
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/SketchResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SketchResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/SketchResponse'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/me:
    get:
      tags:
        - Users
      summary: '사용자의 현재 정보와, 소속되어 있는 채널 정보를 반환합니다.'
      operationId: GetUsersDetailProjectionAsync
      responses:
        '200':
          description: 사용자 조회에 성공한 경우
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/MeProjection'
            application/json:
              schema:
                $ref: '#/components/schemas/MeProjection'
            text/json:
              schema:
                $ref: '#/components/schemas/MeProjection'
        '404':
          description: 사용자를 어떠한 이유로 찾을 수 없는 경우
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - JwtAuthenticationFilter: []
  /users/preferences:
    post:
      tags:
        - Users
      summary: 현재 사용자의 계정 설정을 업데이트 합니다. 업데이트 이후
      description: 'MeProjection에 대한 Cache Invalidation을 진행하며, 클라이언트 측에서 ME API를 호출하여 최신 정보를 받아옵니다.'
      operationId: UpdateUserPreferenceAsync
      requestBody:
        description: Update Request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserPreferenceRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateUserPreferenceRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateUserPreferenceRequest'
      responses:
        '401':
          description: 사용자 인증에 실패한 경우
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 알 수 없는 에러로 사용자 정보를 찾을 수 없는 경우
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '204':
          description: 사용자 정보 업데이트에 성공한 경우
      security:
        - JwtAuthenticationFilter: []
  /users/search:
    get:
      tags:
        - Users
      summary: 사용자를 검색합니다.(이메일/이름 동시 지원)
      operationId: SearchUserAsync
      parameters:
        - name: query
          in: query
          description: 검색어(이메일/이름 동시 지원)
          style: form
          schema:
            type: string
      responses:
        '200':
          description: 성공적으로 사용자 검색을 완료한 경우
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSearchResponse'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSearchResponse'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSearchResponse'
        '401':
          description: 사용자 인증에 실패한 경우
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - JwtAuthenticationFilter: []
  /users:
    delete:
      tags:
        - Users
      summary: 사용자를 서비스에서 제거합니다.
      description: 해당 API는 이용자가 탈퇴하려는 본인 1명인 채널까지 모두 삭제합니다.
      operationId: DeleteUserAsync
      responses:
        '200':
          description: Success
        '400':
          description: 여려명이 존재하는 채널에 본인이 소유자인 경우(소유자 제거 필요)
        '401':
          description: 사용자 인증에 실패한 경우
        '204':
          description: 사용자 삭제에 성공한 경우
      security:
        - JwtAuthenticationFilter: []
  /users/audit:
    get:
      tags:
        - Users
      operationId: GetUserAuditLogAsync
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuditLog'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuditLog'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuditLog'
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - JwtAuthenticationFilter: []
components:
  schemas:
    AddUserToChannelRequest:
      required:
        - channelPermissionType
        - targetUserId
      type: object
      properties:
        targetUserId:
          minLength: 1
          type: string
        channelPermissionType:
          $ref: '#/components/schemas/ChannelPermissionType'
      additionalProperties: false
    AuditLog:
      type: object
      properties:
        auditName:
          type: string
          nullable: true
        auditTime:
          type: string
          format: date-time
      additionalProperties: false
    ChannelInformationResponse:
      required:
        - channelId
        - channelUserInformationList
        - description
        - name
      type: object
      properties:
        channelId:
          minLength: 1
          type: string
        name:
          minLength: 1
          type: string
        description:
          minLength: 1
          type: string
        profileImageUrl:
          type: string
          nullable: true
        channelUserInformationList:
          type: array
          items:
            $ref: '#/components/schemas/ChannelUserInformationProjection'
      additionalProperties: false
    ChannelPermissionProjection:
      required:
        - channelId
        - channelName
        - channelPermissionType
        - createdAt
        - userId
      type: object
      properties:
        userId:
          minLength: 1
          type: string
        channelId:
          minLength: 1
          type: string
        channelName:
          minLength: 1
          type: string
        channelPermissionType:
          $ref: '#/components/schemas/ChannelPermissionType'
        createdAt:
          type: string
          format: date-time
      additionalProperties: false
    ChannelPermissionType:
      enum:
        - Owner
        - Reader
      type: string
    ChannelUserInformationProjection:
      required:
        - channelPermissionType
        - email
        - name
        - userId
      type: object
      properties:
        userId:
          minLength: 1
          type: string
        name:
          minLength: 1
          type: string
        email:
          minLength: 1
          type: string
        channelPermissionType:
          $ref: '#/components/schemas/ChannelPermissionType'
        profilePictureImageUrl:
          type: string
          nullable: true
      additionalProperties: false
    CreateChannelRequest:
      required:
        - description
        - name
      type: object
      properties:
        name:
          minLength: 1
          type: string
          description: 생성할 채널의 이름입니다.
        description:
          minLength: 1
          type: string
          description: 생성할 채널의 1줄 설명입니다.
        imageUrl:
          type: string
          description: 'Optional: 채널의 프로필 이미지 URL입니다.'
          nullable: true
      additionalProperties: false
    CreateSketchRequest:
      required:
        - blockSketch
        - description
        - name
      type: object
      properties:
        name:
          minLength: 1
          type: string
          description: 스케치 이름입니다.
        description:
          minLength: 1
          type: string
          description: 스케치 설명입니다.
        blockSketch: {}
      additionalProperties: false
    CredentialProvider:
      enum:
        - Google
        - Self
      type: string
    DeploymentProjection:
      required:
        - capturedBlockSketch
        - channelId
        - channelName
        - createdAt
        - deploymentId
        - deploymentStatus
        - pluginId
        - sketchId
        - sketchName
      type: object
      properties:
        channelId:
          minLength: 1
          type: string
        channelName:
          minLength: 1
          type: string
        deploymentId:
          minLength: 1
          type: string
        sketchId:
          minLength: 1
          type: string
        sketchName:
          minLength: 1
          type: string
        pluginId:
          minLength: 1
          type: string
        deploymentStatus:
          $ref: '#/components/schemas/DeploymentStatus'
        createdAt:
          type: string
          format: date-time
        deploymentOutput:
          nullable: true
        capturedBlockSketch: {}
      additionalProperties: false
    DeploymentStatus:
      enum:
        - Created
        - Deploying
        - Deployed
        - Failed
      type: string
    ErrorResponse:
      type: object
      properties:
        statusCodes:
          type: integer
          format: int32
        errorMessage:
          type: string
          nullable: true
        errorTitle:
          type: string
          nullable: true
      additionalProperties: false
    FileProjectionResponse:
      required:
        - contentDispositionFileName
        - contentDispositionName
        - contentType
        - fileId
        - fileSize
      type: object
      properties:
        fileId:
          minLength: 1
          type: string
        contentDispositionFileName:
          minLength: 1
          type: string
        contentDispositionName:
          minLength: 1
          type: string
        contentType:
          minLength: 1
          type: string
        fileSize:
          type: integer
          format: int64
      additionalProperties: false
    IncrementalDeploymentRequest:
      required:
        - blockData
      type: object
      properties:
        blockData: {}
        pluginId:
          type: string
          nullable: true
      additionalProperties: false
    InstallPluginRequest:
      required:
        - pluginConfiguration
        - pluginId
      type: object
      properties:
        pluginId:
          minLength: 1
          type: string
        pluginConfiguration: {}
      additionalProperties: false
    LightDeploymentProjection:
      type: object
      properties:
        deploymentId:
          type: string
          nullable: true
      additionalProperties: false
    LoginRequest:
      required:
        - authenticationCode
        - provider
      type: object
      properties:
        provider:
          $ref: '#/components/schemas/CredentialProvider'
        authenticationCode:
          minLength: 1
          type: string
          description: OAuth Provider이 보내주는 인가 코드입니다.
      additionalProperties: false
    LoginResult:
      enum:
        - NeedsRegistration
        - LoginSucceed
      type: string
    MeProjection:
      required:
        - channelPermissionList
        - email
        - name
        - userId
      type: object
      properties:
        userId:
          minLength: 1
          type: string
        name:
          minLength: 1
          type: string
        email:
          minLength: 1
          type: string
        profilePictureImageUrl:
          type: string
          nullable: true
        channelPermissionList:
          type: array
          items:
            $ref: '#/components/schemas/ChannelPermissionProjection'
      additionalProperties: false
    PluginInstallationProjection:
      type: object
      properties:
        channelId:
          type: string
          nullable: true
        installedAt:
          type: string
          format: date-time
      additionalProperties: false
    PluginProjection:
      required:
        - description
        - id
        - name
        - pluginTypeDefinitions
      type: object
      properties:
        id:
          minLength: 1
          type: string
        name:
          minLength: 1
          type: string
        description:
          minLength: 1
          type: string
        pluginTypeDefinitions:
          type: array
          items:
            $ref: '#/components/schemas/PluginTypeDefinition'
        pluginInstallation:
          $ref: '#/components/schemas/PluginInstallationProjection'
      additionalProperties: false
    PluginTypeDefinition:
      type: object
      properties:
        fieldName:
          type: string
          nullable: true
        fieldType:
          type: string
          nullable: true
        fieldDescription:
          type: string
          nullable: true
        isRequired:
          type: boolean
        isSecret:
          type: boolean
        defaultValue:
          type: string
          nullable: true
      additionalProperties: false
    PriceInfoPerVendorProjection:
      required:
        - pricePerHour
        - pricingInformationId
        - tierInformation
        - vendor
      type: object
      properties:
        pricingInformationId:
          minLength: 1
          type: string
        vendor:
          $ref: '#/components/schemas/VendorType'
        pricePerHour:
          type: number
          format: double
        tierInformation:
          minLength: 1
          type: string
      additionalProperties: false
    PricingInformationProjection:
      required:
        - id
        - machineType
        - priceInfoPerVendors
        - tier
      type: object
      properties:
        id:
          minLength: 1
          type: string
        machineType:
          $ref: '#/components/schemas/PricingMachineType'
        tier:
          minLength: 1
          type: string
        priceInfoPerVendors:
          type: array
          items:
            $ref: '#/components/schemas/PriceInfoPerVendorProjection'
      additionalProperties: false
    PricingMachineType:
      enum:
        - VirtualMachine
        - WebServer
        - DatabaseServer
      type: string
    RefreshTokenRequest:
      required:
        - accessToken
        - refreshToken
      type: object
      properties:
        accessToken:
          minLength: 1
          type: string
          description: 만료된 엑세스 토큰
        refreshToken:
          minLength: 1
          type: string
          description: 리프레시 토큰
      additionalProperties: false
    SignUpRequest:
      type: object
      properties:
        name:
          type: string
          description: User Nickname
          nullable: true
        email:
          type: string
          description: User Email
          nullable: true
        profileImageUrl:
          type: string
          description: Profile Image URL(Can be NULL)
          nullable: true
        joinToken:
          type: string
          description: 로그인 API에서 받은 Join Token입니다.
          nullable: true
        credentialProvider:
          $ref: '#/components/schemas/CredentialProvider'
      additionalProperties: false
    SketchResponse:
      required:
        - blockSketch
        - channelId
        - createdAt
        - description
        - name
        - sketchId
        - updatedAt
      type: object
      properties:
        sketchId:
          minLength: 1
          type: string
          description: 스케치의 Unique ID입니다.
        name:
          minLength: 1
          type: string
          description: 스케치의 이름입니다.
        description:
          minLength: 1
          type: string
          description: 스케치의 설명입니다.
        channelId:
          minLength: 1
          type: string
          description: 스케치의 채널 ID입니다.
        blockSketch:
          description: 스케치의 블록 스케치입니다.
        createdAt:
          type: string
          description: 생성일
          format: date-time
        updatedAt:
          type: string
          description: 마지막 수정일
          format: date-time
        thumbnailUrl:
          type: string
          nullable: true
      additionalProperties: false
    TokenResponse:
      required:
        - loginResult
        - token
      type: object
      properties:
        loginResult:
          $ref: '#/components/schemas/LoginResult'
        token:
          minLength: 1
          type: string
          description: 'Access Token, expires in an hour.'
        refreshToken:
          type: string
          description: 'Refresh Token, expires in 30 days.'
          nullable: true
      additionalProperties: false
    UpdateChannelInformationRequest:
      required:
        - channelDescription
        - channelName
      type: object
      properties:
        channelName:
          minLength: 1
          type: string
        channelDescription:
          minLength: 1
          type: string
        profileImageUrl:
          type: string
          nullable: true
      additionalProperties: false
    UpdateSketchRequest:
      required:
        - blockData
        - description
        - name
      type: object
      properties:
        name:
          minLength: 1
          type: string
          description: 스케치 이름입니다.
        description:
          minLength: 1
          type: string
          description: 스케치 설명입니다.
        blockData: {}
        thumbnailImageUrl:
          type: string
          nullable: true
      additionalProperties: false
    UpdateUserChannelRoleRequest:
      required:
        - channelPermissionType
        - userId
      type: object
      properties:
        userId:
          minLength: 1
          type: string
        channelPermissionType:
          $ref: '#/components/schemas/ChannelPermissionType'
      additionalProperties: false
    UpdateUserPreferenceRequest:
      required:
        - email
        - name
      type: object
      properties:
        name:
          minLength: 1
          type: string
        email:
          minLength: 1
          type: string
        profilePictureImageUrl:
          type: string
          nullable: true
      additionalProperties: false
    UserSearchResponse:
      required:
        - userEmail
        - userId
        - userName
      type: object
      properties:
        userId:
          minLength: 1
          type: string
        userName:
          minLength: 1
          type: string
        userEmail:
          minLength: 1
          type: string
        profilePictureImageUrl:
          type: string
          nullable: true
      additionalProperties: false
    VendorType:
      enum:
        - AWS
      type: string
  securitySchemes:
    JwtAuthenticationFilter:
      type: http
      scheme: Bearer
