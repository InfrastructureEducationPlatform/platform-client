openapi: 3.0.1
info:
  title: BlockInfrastructure-Core
  version: '1.0'
paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: 서비스에 로그인을 실시합니다.
      description: 등록되지 않은 유저인 경우 NeedsRegistration과 JoinToken을 응답으로 반환합니다.
      operationId: LoginAsync
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TokenResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
  /auth/register:
    post:
      tags:
        - Auth
      summary: 서비스에 회원 가입합니다.
      operationId: RegisterAsync
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
      responses:
        '200':
          description: 회원 가입에 성공했을 때 반환합니다.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TokenResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: JWT Join Token Validation에 실패했을 때
        '409':
          description: 이미 존재하는 인증 정보일 때
components:
  schemas:
    CredentialProvider:
      enum:
        - Google
      type: string
    LoginRequest:
      required:
        - authenticationCode
        - provider
      type: object
      properties:
        provider:
          $ref: '#/components/schemas/CredentialProvider'
        authenticationCode:
          minLength: 1
          type: string
          description: OAuth Provider이 보내주는 인가 코드입니다.
      additionalProperties: false
    LoginResult:
      enum:
        - NeedsRegistration
        - LoginSucceed
      type: string
    SignUpRequest:
      type: object
      properties:
        name:
          type: string
          description: User Nickname
          nullable: true
        email:
          type: string
          description: User Email
          nullable: true
        profileImageUrl:
          type: string
          description: Profile Image URL(Can be NULL)
          nullable: true
        joinToken:
          type: string
          description: 로그인 API에서 받은 Join Token입니다.
          nullable: true
        credentialProvider:
          $ref: '#/components/schemas/CredentialProvider'
      additionalProperties: false
    TokenResponse:
      required:
        - token
      type: object
      properties:
        loginResult:
          $ref: '#/components/schemas/LoginResult'
        token:
          minLength: 1
          type: string
          description: 'Access Token, expires in an hour.'
        refreshToken:
          type: string
          description: 'Refresh Token, expires in 30 days.'
          nullable: true
      additionalProperties: false